services:
    mongodb:
        image: mongo:latest
        container_name: mongo-database
        restart: unless-stopped
#        ports:
#            - "27017:27017"
        volumes:
            - mongodb_data:/data/db
        environment:
            - MONGO_INITDB_ROOT_USERNAME=${DB_USERNAME}
            - MONGO_INITDB_ROOT_PASSWORD=${DB_PASS}
            - MONGO_INITDB_DATABASE=${DB_NAME}
        networks:
            - buy01-network
        healthcheck:
            test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test -quiet
            interval: 10s
            timeout: 10s
            retries: 2
    zookeeper:
        image: confluentinc/cp-zookeeper:7.2.15
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_TICK_TIME: 3000
    kafka1:
        image: confluentinc/cp-kafka:7.2.15
        depends_on:
            - zookeeper
        ports:
            - "9092:9092"
        environment:
            KAFKA_BROKER_ID: 1
            KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
            KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    kafka2:
        image: confluentinc/cp-kafka:7.2.15
        depends_on:
            - zookeeper
        ports:
            - "9093:9093"
        environment:
            KAFKA_BROKER_ID: 2
            KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9093
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
            KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"

    eureka-server:
        build:
            context: .
            dockerfile: ./eureka-server/Dockerfile
        container_name: eureka-server
        restart: unless-stopped
        ports:
            - "${EUREKA_SERVER_PORT}:${EUREKA_SERVER_PORT}"
        environment:
            - EUREKA_SERVER_PORT=${EUREKA_SERVER_PORT}
            - SPRING_PROFILES_ACTIVE=docker
        networks:
            - buy01-network
        healthcheck:
            test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 40s

    api-gateway:
        build:
            context: .
            dockerfile: ./api-gateway/Dockerfile
        container_name: api-gateway
        restart: unless-stopped
        ports:
            - "8080:8080"
        environment:
            -   EUREKA_SERVER_PORT=${EUREKA_SERVER_PORT}
            -   SPRING_PROFILES_ACTIVE=docker
            -   KEY_STORE_PASSWORD=${KEY_STORE_PASSWORD}
            -   KEY_ALIAS=${KEY_ALIAS}
        depends_on:
            eureka-server:
                condition: service_healthy
        networks:
            - buy01-network
        healthcheck:
            test: [ "CMD", "curl", "-kf", "https://localhost:8080/actuator/health" ]
            interval: 30s
            timeout: 10s
            retries: 2

    user-service:
        build:
            context: .
            dockerfile: ./user-service/Dockerfile
        container_name: user-service
        restart: unless-stopped
#        ports:
#            - "8081:8081"
        environment:
            - EUREKA_SERVER_PORT=${EUREKA_SERVER_PORT}
            - SPRING_PROFILES_ACTIVE=docker
            - DB_USERNAME=${DB_USERNAME}
            - DB_PASS=${DB_PASS}
            - DB_NAME=${DB_NAME}
            - DB_HOSTNAME=${DB_HOSTNAME}
            - DB_PORT=${DB_PORT}
            - DB_AUTH_DB=${DB_AUTH_DB}
            - JWT_SECRET=${JWT_SECRET}
            - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
            - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
        depends_on:
            eureka-server:
                condition: service_healthy
            mongodb:
                condition: service_healthy
        networks:
            - buy01-network
        healthcheck:
            test: [ "CMD", "curl", "-f", "http://localhost:8081/actuator/health" ]
            interval: 30s
            timeout: 10s
            retries: 2

    product-service:
        build:
            context: .
            dockerfile: ./product-service/Dockerfile
        container_name: product-service
        restart: unless-stopped
#        ports:
#            - "8082:8082"
        environment:
            - EUREKA_SERVER_PORT=${EUREKA_SERVER_PORT}
            - SPRING_PROFILES_ACTIVE=docker
            - DB_USERNAME=${DB_USERNAME}
            - DB_PASS=${DB_PASS}
            - DB_NAME=${DB_NAME}
            - DB_HOSTNAME=${DB_HOSTNAME}
            - DB_PORT=${DB_PORT}
            - DB_AUTH_DB=${DB_AUTH_DB}
        depends_on:
            eureka-server:
                condition: service_healthy
            mongodb:
                condition: service_healthy
        networks:
            - buy01-network
        healthcheck:
            test: [ "CMD", "curl", "-f", "http://localhost:8082/actuator/health" ]
            interval: 30s
            timeout: 10s
            retries: 2

    media-service:
        build:
            context: .
            dockerfile: ./media-service/Dockerfile
        container_name: media-service
        restart: unless-stopped
#        ports:
#            - "8083:8083"
        environment:
            - EUREKA_SERVER_PORT=${EUREKA_SERVER_PORT}
            - SPRING_PROFILES_ACTIVE=docker
            - DB_USERNAME=${DB_USERNAME}
            - DB_PASS=${DB_PASS}
            - DB_NAME=${DB_NAME}
            - DB_HOSTNAME=${DB_HOSTNAME}
            - DB_PORT=${DB_PORT}
            - DB_AUTH_DB=${DB_AUTH_DB}
            - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
            - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
        depends_on:
            eureka-server:
                condition: service_healthy
            mongodb:
                condition: service_healthy
        networks:
            - buy01-network
        healthcheck:
            test: [ "CMD", "curl", "-f", "http://localhost:8083/actuator/health" ]
            interval: 30s
            timeout: 10s
            retries: 2

    frontend:
        build:
            context: ./frontend
            dockerfile: Dockerfile
        container_name: frontend
        restart: unless-stopped
        ports:
            - "4200:4200"
        depends_on:
            api-gateway:
                condition: service_healthy

volumes:
    mongodb_data:

networks:
    buy01-network:
        driver: bridge